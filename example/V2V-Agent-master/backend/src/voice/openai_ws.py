from fastapi import WebSocket, WebSocketDisconnect, APIRouter
from openai import OpenAI
from config import settings
import tempfile

client = OpenAI(api_key=settings.OPENAI_API_KEY)

router = APIRouter()    

@router.websocket("/ws/voice-chat")
async def websocket_voice_chat(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_bytes()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=".webm") as tmp:
                tmp.write(data)
                tmp_path = tmp.name

            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º
            with open(tmp_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = client.chat.completions.create(
                model="gpt-4o",  # –º–æ–∂–Ω–æ turbo
                messages=[{"role": "user", "content": transcript.text}]
            )
            reply_text = response.choices[0].message.content

            # üîä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
            tts_response = client.audio.speech.create(
                model="tts-1",
                voice="nova",  # –º–æ–∂–Ω–æ 'alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer'
                input=reply_text,
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º mp3-—Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
            await websocket.send_bytes(tts_response.read())
    except WebSocketDisconnect:
        print("Client disconnected")
