// Google Analytics Service
class AnalyticsService {
  constructor() {
    this.isEnabled = typeof window !== 'undefined' && window.gtag;
    this.measurementId = 'G-EH59M60G1Z';
  }

  // Safe event tracking with retry mechanism
  safeTrackEvent(eventName, eventData, retryCount = 0) {
    const maxRetries = 3;
    
    if (!this.isEnabled || typeof window === 'undefined' || !window.gtag) {
      console.warn(`‚ùå Analytics not ready for event: ${eventName}`);
      
      // Retry after delay if analytics not ready
      if (retryCount < maxRetries) {
        setTimeout(() => {
          this.safeTrackEvent(eventName, eventData, retryCount + 1);
        }, 1000 * (retryCount + 1));
      }
      return;
    }

    try {
      window.gtag('event', eventName, eventData);
      console.log(`‚úÖ Analytics event sent: ${eventName}`, eventData);
    } catch (error) {
      console.error(`‚ùå Failed to send analytics event: ${eventName}`, error);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  init() {
    if (!this.isEnabled) {
      console.warn('Google Analytics –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤
    window.gtag('config', this.measurementId, {
      custom_map: {
        user_type: 'custom_user_type',
        user_premium: 'custom_user_premium'
      }
    });

    console.log('Google Analytics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  trackPageView(pageName, pageTitle = null) {
    if (!this.isEnabled) {
      console.warn('gtag –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è trackPageView');
      return;
    }

    window.gtag('event', 'page_view', {
      page_title: pageTitle || pageName,
      page_location: window.location.href,
      page_name: pageName
    });

    // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gtag —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('gtag function exists:', typeof window.gtag);
    console.log('dataLayer exists:', window.dataLayer ? window.dataLayer.length : 'No dataLayer');
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - ${pageName}`);
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç
  trackUserVisit() {
    if (!this.isEnabled) return;

    window.gtag('event', 'user_visit', {
      event_category: 'User Engagement',
      event_label: 'Site Visit',
      value: 1
    });

    console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –Ω–∞ —Å–∞–π—Ç');
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  trackUserLogin(method = 'google') {
    const eventData = {
      method: method,
      event_category: 'Authentication',
      event_label: 'User Login',
      value: 1
    };

    this.safeTrackEvent('login', eventData);
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ ${method}`);
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã
  trackClothingAdded(category = 'unknown') {
    const eventData = {
      event_category: 'Wardrobe Management',
      event_label: 'Add Clothing Item',
      clothing_category: category,
      value: 1
    };

    this.safeTrackEvent('clothing_added', eventData);
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–¥–µ–∂–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ V2V –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
  trackV2VDialogue(duration = null) {
    const eventData = {
      event_category: 'AI Interaction',
      event_label: 'V2V Dialogue',
      value: 1
    };

    if (duration) {
      eventData.custom_duration = duration;
    }

    this.safeTrackEvent('v2v_dialogue', eventData);
    console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: V2V –¥–∏–∞–ª–æ–≥ —Å –ò–ò');
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≤–µ—Ç–∞ –æ—Ç –ò–ò
  trackAIAdviceRequest(adviceType = 'general') {
    const eventData = {
      event_category: 'AI Interaction',
      event_label: 'AI Style Advice',
      advice_type: adviceType,
      value: 1
    };

    this.safeTrackEvent('ai_advice_request', eventData);
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ó–∞–ø—Ä–æ—Å —Å–æ–≤–µ—Ç–∞ –æ—Ç –ò–ò - ${adviceType}`);
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
  trackSessionStart() {
    if (!this.isEnabled) return;

    window.gtag('event', 'session_start', {
      event_category: 'User Engagement',
      event_label: 'Session Start',
      value: 1
    });

    console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏');
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞
  trackFirstVisit() {
    if (!this.isEnabled) return;

    window.gtag('event', 'first_visit', {
      event_category: 'User Engagement',
      event_label: 'First Visit',
      value: 1
    });

    console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç');
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  trackUserEngagement(engagementType = 'general', details = {}) {
    const eventData = {
      event_category: 'User Engagement',
      event_label: engagementType,
      engagement_type: engagementType,
      ...details,
      value: 1
    };

    this.safeTrackEvent('user_engagement', eventData);
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - ${engagementType}`);
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
  trackCustomEvent(eventName, category, label = null, value = null, customParameters = {}) {
    if (!this.isEnabled) return;

    const eventData = {
      event_category: category,
      ...customParameters
    };

    if (label) eventData.event_label = label;
    if (value) eventData.value = value;

    window.gtag('event', eventName, eventData);

    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ - ${eventName}`);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  setUserProperties(userId, properties = {}) {
    if (!this.isEnabled) return;

    window.gtag('config', this.measurementId, {
      user_id: userId,
      custom_map: {
        user_type: properties.userType || 'free',
        user_premium: properties.isPremium || false,
        ...properties
      }
    });

    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –°–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${userId}`);
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  trackError(errorMessage, errorCategory = 'JavaScript Error') {
    if (!this.isEnabled) return;

    window.gtag('event', 'exception', {
      description: errorMessage,
      fatal: false,
      event_category: errorCategory
    });

    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –û—à–∏–±–∫–∞ - ${errorMessage}`);
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
  trackConversion(conversionType, value = null) {
    if (!this.isEnabled) return;

    const eventData = {
      event_category: 'Conversion',
      event_label: conversionType
    };

    if (value) eventData.value = value;

    window.gtag('event', 'conversion', eventData);

    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ö–æ–Ω–≤–µ—Ä—Å–∏—è - ${conversionType}`);
  }

  // Test function to send all main events for verification
  testAllEvents() {
    console.log('üß™ === TESTING ALL ANALYTICS EVENTS ===');
    
    const testEvents = [
      () => this.trackUserLogin('google'),
      () => this.trackUserEngagement('test_engagement'),
      () => this.trackAIAdviceRequest('test_occasion'),
      () => this.trackV2VDialogue(30),
      () => this.trackClothingAdded('test_category'),
      () => this.trackPageView('test_page'),
      () => this.trackUserVisit(),
      () => this.trackSessionStart(),
      () => this.trackFirstVisit()
    ];
    
    testEvents.forEach((eventFunc, index) => {
      setTimeout(() => {
        try {
          eventFunc();
          console.log(`‚úÖ Test event ${index + 1} sent`);
        } catch (error) {
          console.error(`‚ùå Test event ${index + 1} failed:`, error);
        }
      }, index * 1500); // Send events 1.5 seconds apart
    });
    
    console.log('üß™ All test events scheduled. Check Google Analytics in 2-3 minutes.');
    console.log('üîó Go to: https://analytics.google.com/');
    console.log('üìä Look in: Realtime > Events');
  }

  // Test function to send multiple events for verification
  testAnalytics() {
    console.log('üß™ === TESTING ANALYTICS ===');
    
    // Send multiple test events
    const testEvents = [
      { name: 'test_event_1', category: 'Test', label: 'Manual Test 1' },
      { name: 'test_event_2', category: 'Test', label: 'Manual Test 2' },
      { name: 'test_event_3', category: 'Test', label: 'Manual Test 3' }
    ];
    
    testEvents.forEach((event, index) => {
      setTimeout(() => {
        this.safeTrackEvent(event.name, {
          event_category: event.category,
          event_label: event.label,
          timestamp: Date.now()
        });
      }, index * 1000); // Send events 1 second apart
    });
    
    console.log('üß™ Test events scheduled. Check Google Analytics in 2-3 minutes.');
    console.log('üîó Go to: https://analytics.google.com/');
    console.log('üìä Look in: Realtime > Events');
  }

  // Comprehensive analytics debugging
  debugAnalytics() {
    console.log('üîç === ANALYTICS DEBUGGING ===');
    console.log('1. gtag function exists:', typeof window.gtag);
    console.log('2. dataLayer exists:', !!window.dataLayer);
    console.log('3. dataLayer length:', window.dataLayer ? window.dataLayer.length : 0);
    console.log('4. dataLayer contents:', window.dataLayer ? window.dataLayer.slice(-5) : 'None');
    
    // Check if GA script loaded
    const gaScript = document.querySelector('script[src*="googletagmanager.com/gtag/js"]');
    console.log('5. GA script loaded:', !!gaScript);
    console.log('6. GA script src:', gaScript ? gaScript.src : 'Not found');
    
    // Check measurement ID
    console.log('7. Measurement ID:', this.measurementId);
    
    // Test network requests
    console.log('8. Testing manual gtag call...');
    if (window.gtag) {
      window.gtag('event', 'debug_test', {
        event_category: 'Debug',
        event_label: 'Manual Debug Test',
        custom_parameter: 'debug_' + Date.now()
      });
      console.log('‚úÖ Manual gtag event sent');
    } else {
      console.error('‚ùå gtag function not available');
    }
    
    // Check for ad blockers or privacy extensions
    console.log('9. Check browser developer tools Network tab for:');
    console.log('   - Requests to googletagmanager.com');
    console.log('   - Requests to google-analytics.com');
    console.log('   - Any blocked requests (red entries)');
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const analytics = new AnalyticsService();

export default analytics; 