import os
import io
import json
import re
import requests
from typing import Dict, List, Optional
from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai
from .image_compression import ImageCompressionService

load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def ai_classify_clothing(image_bytes: bytes) -> Dict:
    try:
        print(f"üîç Starting AI classification with image size: {len(image_bytes)} bytes")
        
        # Compress image for AI processing to reduce costs
        compressed_bytes = ImageCompressionService.compress_for_ai_processing(image_bytes)
        print(f"üì¶ Compressed image size: {len(compressed_bytes)} bytes")
        
        image = Image.open(io.BytesIO(compressed_bytes))
        print(f"üñºÔ∏è Image opened successfully: {image.size}, mode: {image.mode}")

        model = genai.GenerativeModel("gemini-1.5-flash")

        prompt = (
            "You are a professional fashion stylist. Classify this clothing item and return JSON in this EXACT format only:\n"
            "{\n"
            "  \"name\": \"specific item name (e.g., 'Blue Denim Jacket', 'Black Cotton T-Shirt')\",\n"
            "  \"brand\": \"brand name or null if not visible\",\n"
            "  \"category\": \"clothing category (e.g., 'T-shirt', 'Jeans', 'Dress', 'Jacket', 'Sneakers')\",\n"
            "  \"gender\": \"male/female/unisex\",\n"
            "  \"color\": \"primary color\",\n"
            "  \"size\": \"size if visible or null\",\n"
            "  \"material\": \"fabric/material type if identifiable\",\n"
            "  \"description\": \"detailed description including style, fit, and notable features\",\n"
            "  \"tags\": [\"style tags like casual, formal, vintage, trendy, etc.\"],\n"
            "  \"occasions\": [\"suitable occasions like work, party, casual, gym, date, etc.\"],\n"
            "  \"weather_suitability\": [\"appropriate weather like summer, winter, spring, fall, rain, cold, warm, etc.\"]\n"
            "}\n\n"
            "Important: Always provide meaningful values for tags, occasions, and weather_suitability arrays - never leave them empty!"
        )

        print("ü§ñ Sending request to Gemini AI...")
        response = model.generate_content([prompt, image], generation_config={"temperature": 0.4})
        print(f"‚úÖ Received AI response: {response.text[:200]}...")  # First 200 chars

        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON
        match = re.search(r'\{.*\}', response.text, re.DOTALL)
        if match:
            json_text = match.group()
            print(f"üìù Extracted JSON: {json_text[:200]}...")
            
            result = json.loads(json_text)
            print("‚úÖ Successfully parsed AI response:", result)
            
            # Ensure we have the required arrays
            if 'tags' not in result:
                result['tags'] = []
            if 'occasions' not in result:
                result['occasions'] = []
            if 'weather_suitability' not in result:
                result['weather_suitability'] = []
                
            return result
        else:
            print("‚ùå No JSON object found in AI response")
            print(f"Full response: {response.text}")
            return {"error": "No JSON object found in AI response"}

    except json.JSONDecodeError as e:
        print(f"‚ùå JSON parsing error: {e}")
        return {"error": f"JSON parsing error: {str(e)}"}
    except Exception as e:
        print(f"‚ùå Error in AI classification: {e}")
        return {"error": f"AI classification error: {str(e)}"}

async def classify_clothing_image(image_url: str, additional_context: Optional[str] = None) -> Dict:
    """
    Classify clothing from an image URL.
    Downloads the image and uses the AI classification function.
    """
    try:
        # Download the image from URL
        response = requests.get(image_url, timeout=30)
        response.raise_for_status()
        
        # Get image bytes
        image_bytes = response.content
        
        # Use existing classification function
        result = ai_classify_clothing(image_bytes)
        
        print("üîç Raw AI classification result:", result)
        
        # Map the result to match the expected schema
        mapped_result = {
            "clothing_type": result.get("category", "Unknown"),
            "color": result.get("color", "Unknown"),
            "material": result.get("material"),
            "pattern": None,
            "brand": result.get("brand"),
            "confidence_score": 0.8,  # Default confidence
            "description": result.get("description"),
            "predicted_tags": result.get("tags", []),
            "occasions": result.get("occasions", []),
            "weather_suitability": result.get("weather_suitability", []),
            "predicted_name": result.get("name"),
            "predicted_category": result.get("category"),
            "predicted_color": result.get("color"),
            "predicted_brand": result.get("brand"),
            "predicted_material": result.get("material"),
            "additional_details": {
                "gender": result.get("gender"),
                "size": result.get("size")
            }
        }
        
        print("üì¶ Final mapped result:", mapped_result)
        
        return mapped_result
        
    except requests.RequestException as e:
        print(f"‚ùå Error downloading image from {image_url}: {e}")
        raise Exception(f"Failed to download image: {str(e)}")
    except Exception as e:
        print(f"‚ùå Error classifying image: {e}")
        raise Exception(f"Classification failed: {str(e)}")

def ai_generate_daily_outfits(forecast_data: Dict, user_items: List[Dict] = None, occasion: str = "casual") -> Dict:
    """Generate outfit recommendations for each day based on weather forecast"""
    
    model = genai.GenerativeModel("gemini-1.5-flash")
    
    # Prepare weather context
    city = forecast_data.get("city", "your location")
    daily_forecasts = forecast_data.get("daily_forecasts", [])
    
    # Prepare user items context if available
    items_context = ""
    if user_items:
        items_summary = []
        for item in user_items[:10]:  # Limit to prevent token overflow
            item_desc = f"{item.get('name', 'item')} ({item.get('category', 'clothing')}, {item.get('color', 'unknown color')})"
            items_summary.append(item_desc)
        items_context = f"\n\nUser's available items: {', '.join(items_summary)}"
    
    # Create forecast summary
    forecast_summary = []
    for day in daily_forecasts:
        forecast_summary.append(
            f"{day['date_formatted']}: {day['temperature_min']}-{day['temperature_max']}¬∞C, {day['condition']}, {day['description']}"
        )
    
    prompt = f"""
You are a professional fashion stylist. Create outfit recommendations for the next {len(daily_forecasts)} days in {city}.

Weather forecast:
{chr(10).join(forecast_summary)}

Occasion: {occasion}
{items_context}

Return ONLY a JSON object in this exact format:
{{
    "city": "{city}",
    "total_days": {len(daily_forecasts)},
    "daily_outfits": [
        {{
            "date": "YYYY-MM-DD",
            "date_formatted": "Day, Month DD",
            "weather_summary": "Temperature range and condition",
            "outfit_theme": "Brief theme description",
            "recommendations": {{
                "top": {{
                    "item": "Recommended top",
                    "color": "Recommended color",
                    "reason": "Why this works for the weather"
                }},
                "bottom": {{
                    "item": "Recommended bottom",
                    "color": "Recommended color", 
                    "reason": "Why this works for the weather"
                }},
                "footwear": {{
                    "item": "Recommended shoes",
                    "color": "Recommended color",
                    "reason": "Why this works for the weather"
                }},
                "outerwear": {{
                    "item": "Recommended jacket/coat or null if not needed",
                    "color": "Recommended color or null",
                    "reason": "Why this is needed or null"
                }},
                "accessories": [
                    {{
                        "item": "Accessory name",
                        "reason": "Why it's recommended"
                    }}
                ]
            }},
            "styling_tips": "2-3 practical styling tips for the day",
            "color_palette": ["color1", "color2", "color3"]
        }}
    ],
    "general_tips": "Overall styling advice for the forecast period"
}}

Consider weather conditions, temperature ranges, and practicality. Focus on real, wearable combinations.
"""

    try:
        response = model.generate_content(prompt, generation_config={"temperature": 0.6})
        
        print("AI forecast outfit response:", response.text[:500])  # Debug output
        
        # Extract JSON from response
        match = re.search(r'\{.*\}', response.text, re.DOTALL)
        if match:
            outfit_data = json.loads(match.group())
            return outfit_data
        else:
            raise ValueError("No JSON object found in AI outfit response.")
            
    except Exception as e:
        print("‚ùå Error generating outfit recommendations:", e)
        
        # Fallback with simple recommendations
        fallback_outfits = []
        for day in daily_forecasts:
            temp_avg = (day['temperature_min'] + day['temperature_max']) / 2
            
            # Simple weather-based recommendations
            if temp_avg < 0:
                outfit = {
                    "date": day["date"],
                    "date_formatted": day["date_formatted"],
                    "weather_summary": f"{day['temperature_min']}-{day['temperature_max']}¬∞C, {day['condition']}",
                    "outfit_theme": "Warm winter layers",
                    "recommendations": {
                        "top": {"item": "Warm sweater", "color": "Dark colors", "reason": "Retains heat in cold weather"},
                        "bottom": {"item": "Winter pants", "color": "Dark blue or black", "reason": "Warm and practical"},
                        "footwear": {"item": "Winter boots", "color": "Black or brown", "reason": "Waterproof and warm"},
                        "outerwear": {"item": "Heavy coat", "color": "Dark colors", "reason": "Essential for freezing temperatures"},
                        "accessories": [{"item": "Scarf", "reason": "Neck protection"}, {"item": "Gloves", "reason": "Hand warmth"}]
                    },
                    "styling_tips": "Layer clothing for warmth. Choose waterproof materials.",
                    "color_palette": ["Black", "Navy", "Gray"]
                }
            elif temp_avg < 15:
                outfit = {
                    "date": day["date"],
                    "date_formatted": day["date_formatted"],
                    "weather_summary": f"{day['temperature_min']}-{day['temperature_max']}¬∞C, {day['condition']}",
                    "outfit_theme": "Comfortable layers",
                    "recommendations": {
                        "top": {"item": "Light sweater", "color": "Neutral tones", "reason": "Perfect for mild weather"},
                        "bottom": {"item": "Jeans or trousers", "color": "Blue or khaki", "reason": "Versatile and comfortable"},
                        "footwear": {"item": "Sneakers", "color": "White or neutral", "reason": "Comfortable for walking"},
                        "outerwear": {"item": "Light jacket", "color": "Neutral", "reason": "Extra warmth if needed"},
                        "accessories": [{"item": "Light scarf", "reason": "Style and mild warmth"}]
                    },
                    "styling_tips": "Layer with removable pieces. Choose breathable fabrics.",
                    "color_palette": ["Beige", "Navy", "White"]
                }
            else:
                outfit = {
                    "date": day["date"],
                    "date_formatted": day["date_formatted"],
                    "weather_summary": f"{day['temperature_min']}-{day['temperature_max']}¬∞C, {day['condition']}",
                    "outfit_theme": "Light and comfortable",
                    "recommendations": {
                        "top": {"item": "T-shirt or blouse", "color": "Light colors", "reason": "Breathable in warm weather"},
                        "bottom": {"item": "Light pants or shorts", "color": "Light blue or beige", "reason": "Cool and comfortable"},
                        "footwear": {"item": "Light sneakers", "color": "White or light colors", "reason": "Breathable and comfortable"},
                        "outerwear": {"item": None, "color": None, "reason": None},
                        "accessories": [{"item": "Sunglasses", "reason": "Sun protection"}]
                    },
                    "styling_tips": "Choose breathable fabrics. Light colors reflect heat.",
                    "color_palette": ["White", "Light Blue", "Beige"]
                }
            
            fallback_outfits.append(outfit)
        
        return {
            "city": city,
            "total_days": len(daily_forecasts),
            "daily_outfits": fallback_outfits,
            "general_tips": "Dress appropriately for the weather and stay comfortable throughout the day."
        }

def ai_analyze_body_photo(image_bytes: bytes) -> Dict:
    """Analyze a full-body photo to provide personalized style recommendations"""
    try:
        print(f"üîç Starting body photo analysis with image size: {len(image_bytes)} bytes")
        
        # Compress image for AI processing to reduce costs
        compressed_bytes = ImageCompressionService.compress_for_ai_processing(image_bytes)
        print(f"üì¶ Compressed image size: {len(compressed_bytes)} bytes")
        
        image = Image.open(io.BytesIO(compressed_bytes))
        print(f"üñºÔ∏è Image opened successfully: {image.size}, mode: {image.mode}")

        model = genai.GenerativeModel("gemini-1.5-flash")

        prompt = (
            "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ç–∏–ø–æ–≤ —Ñ–∏–≥—É—Ä—ã. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é.\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:\n"
            "1. –¢–∏–ø —Ñ–∏–≥—É—Ä—ã (—è–±–ª–æ–∫–æ, –≥—Ä—É—à–∞, –ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã, –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –∏ —Ç.–¥.)\n"
            "2. –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Ç–µ–ª–∞ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–æ–≥ –∫ —Ç–µ–ª—É, –ø–ª–µ—á –∫ –±–µ–¥—Ä–∞–º –∏ —Ç.–¥.)\n"
            "3. –õ—É—á—à–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–æ–Ω–∞ –∫–æ–∂–∏ –∏ –æ–±—â–µ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
            "4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã\n"
            "5. –°–æ–≤–µ—Ç—ã –ø–æ –º–æ–¥–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π\n"
            "6. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º\n\n"
            "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç –≤ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "{\n"
            "  \"bodyType\": \"–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º\",\n"
            "  \"recommendedColors\": [\"—Å–ø–∏—Å–æ–∫ –∏–∑ 6-10 —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—É—Ç\"],\n"
            "  \"styleRecommendations\": [\"—Å–ø–∏—Å–æ–∫ –∏–∑ 6-8 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å—Ç–∏–ª—é\"],\n"
            "  \"proportions\": {\n"
            "    \"legToBodyRatio\": 0.0,\n"
            "    \"shoulderToHipRatio\": 0.0,\n"
            "    \"waistToHipRatio\": 0.0\n"
            "  },\n"
            "  \"confidence\": 0.0,\n"
            "  \"fashionTips\": [\"–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã\"],\n"
            "  \"bestSilhouettes\": [\"—Å–∏–ª—É—ç—Ç—ã –æ–¥–µ–∂–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç\"],\n"
            "  \"avoidPatterns\": [\"—É–∑–æ—Ä—ã –∏–ª–∏ —Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å\"],\n"
            "  \"accessoryTips\": [\"—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º\"]\n"
            "}\n\n"
            "–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –≤ —Å–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞—Ö. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        )

        response = model.generate_content([prompt, image], generation_config={"temperature": 0.3})
        
        print("AI body analysis response:", response.text[:500])  # Debug output
        
        # Extract JSON from response
        match = re.search(r'\{.*\}', response.text, re.DOTALL)
        if match:
            try:
                result = json.loads(match.group())
                print("‚úÖ Successfully parsed body analysis JSON")
                
                # Validate required fields and provide defaults
                if not result.get("bodyType"):
                    result["bodyType"] = "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"
                
                if not result.get("recommendedColors"):
                    result["recommendedColors"] = ["–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π", "–ë–µ–ª—ã–π", "–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–ë–æ—Ä–¥–æ–≤—ã–π"]
                
                if not result.get("styleRecommendations"):
                    result["styleRecommendations"] = [
                        "–ù–æ—Å–∏—Ç–µ —Ö–æ—Ä–æ—à–æ —Å–∏–¥—è—â—É—é –æ–¥–µ–∂–¥—É",
                        "–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∫–∞–Ω–∏",
                        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Å–∏–ª—É—ç—Ç–∞—Ö",
                        "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏"
                    ]
                
                if not result.get("proportions"):
                    result["proportions"] = {
                        "legToBodyRatio": 0.5,
                        "shoulderToHipRatio": 1.0,
                        "waistToHipRatio": 0.8
                    }
                
                if not result.get("confidence"):
                    result["confidence"] = 0.7
                
                return result
                
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON parsing error: {e}")
                raise ValueError(f"Invalid JSON in AI response: {e}")
        else:
            print("‚ùå No JSON object found in AI response")
            raise ValueError("No JSON object found in AI body analysis response")
            
    except Exception as e:
        print(f"‚ùå Error in body photo analysis: {e}")
        
        # Return fallback analysis
        return {
            "bodyType": "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫",
            "recommendedColors": [
                "–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π", "–ë–µ–ª—ã–π", "–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–ë–æ—Ä–¥–æ–≤—ã–π", 
                "–õ–µ—Å–Ω–æ–π –∑–µ–ª–µ–Ω—ã–π", "–ö—Ä–µ–º–æ–≤—ã–π", "–í–µ—Ä–±–ª—é–∂–∏–π", "–ü—É–¥—Ä–æ–≤—ã–π —Ä–æ–∑–æ–≤—ã–π", "–ò–∑—É–º—Ä—É–¥–Ω—ã–π"
            ],
            "styleRecommendations": [
                "–ù–æ—Å–∏—Ç–µ —Ö–æ—Ä–æ—à–æ —Å–∏–¥—è—â—É—é –æ–¥–µ–∂–¥—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ª–µ–¥—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏–Ω–∏—è–º —Ç–µ–ª–∞",
                "–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∫–∞–Ω–∏ –≤–º–µ—Å—Ç–æ –º–æ–¥–Ω—ã—Ö –≤–µ—â–µ–π",
                "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Å–∏–ª—É—ç—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∏–∑ –º–æ–¥—ã",
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤",
                "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ö–æ—Ä–æ—à–µ–µ –Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ –¥–ª—è –ª—É—á—à–µ–π –ø–æ—Å–∞–¥–∫–∏",
                "–í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–µ–∂–¥—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ",
                "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –Ω–∞ —Ç–∞–ª–∏–∏",
                "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏ –∏ –ø—Ä–∏–Ω—Ç–∞–º–∏"
            ],
            "proportions": {
                "legToBodyRatio": 0.5,
                "shoulderToHipRatio": 1.0,
                "waistToHipRatio": 0.8
            },
            "confidence": 0.5,
            "fashionTips": [
                "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø–æ—Å–∞–¥–∫–µ, –∞ –Ω–µ –Ω–∞ —Ç—Ä–µ–Ω–¥–∞—Ö",
                "–°–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—å–Ω—ã–π –≥–∞—Ä–¥–µ—Ä–æ–± —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –≤–µ—â–∞–º–∏",
                "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø–æ–ª–Ω—è—é—Ç –≤–∞—à —Ç–æ–Ω –∫–æ–∂–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∏—Å—Ç–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤",
                "–ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏"
            ],
            "bestSilhouettes": [
                "–ü–ª–∞—Ç—å—è –ê-—Å–∏–ª—É—ç—Ç–∞",
                "–ë—Ä—é–∫–∏ –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è",
                "–ü—Ä–∏—Ç–∞–ª–µ–Ω–Ω—ã–µ –±–ª–µ–π–∑–µ—Ä—ã",
                "–Æ–±–∫–∏-–∫–∞—Ä–∞–Ω–¥–∞—à",
                "–¢–æ–ø—ã —Å –±–∞—Å–∫–æ–π"
            ],
            "avoidPatterns": [
                "–°–ª–∏—à–∫–æ–º –ø–µ—Å—Ç—Ä—ã–µ –ø—Ä–∏–Ω—Ç—ã",
                "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç–∞—Ö",
                "–û—á–µ–Ω—å –æ–±—ä–µ–º–Ω—ã–µ —Å–∏–ª—É—ç—Ç—ã"
            ],
            "accessoryTips": [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–º–Ω–∏ –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è —Ç–∞–ª–∏–∏",
                "–í—ã–±–∏—Ä–∞–π—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –¥–æ–ø–æ–ª–Ω—è—é—â–∏–µ –≤–∞—à –æ–±—Ä–∞–∑",
                "–ù–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏—Ç–µ —Å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏",
                "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É–º–∫–∏ –∫–∞–∫ –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"
            ],
            "error": f"–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}"
        }
